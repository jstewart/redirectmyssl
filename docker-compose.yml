version: '3.8'

#
# x-** are dummy mapping directives.
# only used for yaml anchors to
# DRY out the compose file
x-app-volumes: &volumes
  volumes:
    - .:/app
    # These are things that change a lot and have to be synced with the host fs
    # If you're running Linux, this is a non-issue. Docker for Mac has significant
    # performance issues with file IO between host (docker) and the system.
    # adding volumes for problem areas is one way to work around the situation
    - gem_cache:/bundle/vendor
    - node_modules:/network/node_modules
    - packs:/network/public/packs
    - packs_test:/network/public/packs-test

services:
  #
  # External Services
  #
  db:
    # At the time of this writing Postgres 13 is the latest.
    image: postgres:13
    restart: on-failure
    volumes:
      - pg_data:/var/lib/postgresql/data
      # allows us to dump the database somewhere:
      # pg_dump -U $POSTGRES_USER -F t $POSTGRES_DB > /backups/$POSTGRES_DB-$(date +%Y-%m-%d).tar'
      - ./db/dumps:/backups
    environment:
      - POSTGRES_PASSWORD=letmein
      - POSTGRES_USER=myuser
      - POSTGRES_DB=appdb
    networks:
      - backend
    ports:
      # I like to expose "system" services on a different port, in case there is already an instance of pgsql running
      # on the host machine.
      - '5433:5432'
  #
  # App services
  #
  web:
    command: bash -c "rm -f /app/tmp/pids/server.pid && rails s -p 3000 -b '0.0.0.0'"
    restart: on-failure
    env_file: .env.docker.development
    environment:
      - WEBPACKER_DEV_SERVER_HOST=webpacker
    # This builds the image as "appimage" so that we can refer to it later in this file.
    image: appimage
    build:
      context: ./
      dockerfile: Dockerfile
    # Nice and DRY
    <<: *volumes
    networks:
      - frontend
      - backend
    ports:
      - '3000:3000'
    # These declarations allow a pry session to be attatched if desired.
    tty: true
    stdin_open: true

  webpacker:
    command: ./bin/webpack-dev-server
    restart: on-failure
    env_file: .env.docker.development
    # This is the app image we built in 'web'
    image: appimage
    environment:
      - WEBPACKER_DEV_SERVER_HOST=0.0.0.0
    <<: *volumes
    # We don't need to connect to the DB at all here, so we just add the frontend network
    networks:
      - frontend
    ports:
      - '3035:3035'

  #
  # Testing
  # To use: docker-compose exec rspec '/path/to/spec'
  #
  test:
    image: appimage
    command: bin/spring server
    env_file: .env.docker.test
    networks:
      - backend
    <<: *volumes

  selenium:
    image: selenium/standalone-chrome:4.0.0-beta-1-prerelease-20210114
    environment:
      - VNC_NO_PASSWORD=1
    networks:
      - backend
    ports:
      - '4444:4444'
      - '5900:5900'

networks:
  frontend:
  backend:

volumes:
  pg_data:
  gem_cache:
  node_modules:
  packs:
  packs_test:
